type Error = record {
  tag : opt text;
  info : opt vec text;
  method_name : opt text;
  message : opt text;
  timestamp : nat64;
  error_type : ErrorKind;
};
type ErrorKind = variant {
  Internal;
  Duplicate;
  SerializeError;
  DeserializeError;
  InsufficientBalance;
  NotFound;
  Unsupported;
  Unauthorized;
  NotImplemented;
  BadRequest;
};
type Result = variant { Ok; Err : Error };
type Result_1 = variant { Ok : Tokens; Err : Error };
type Result_2 = variant { Ok : record { nat64; SpawnStatus }; Err : Error };
type Result_3 = variant { Ok : principal; Err : Error };
type Result_4 = variant { Ok : record { principal; WalletData }; Err : Error };
type SpawnStatus = record {
  done : opt null;
  canister_spawned : opt principal;
  canister_installed : opt principal;
  transaction_valid : opt Tokens;
  status_type : opt text;
  min_amount_error : opt nat64;
  transferred_to_cmc : opt nat64;
  topped_up_self : opt nat;
};
type Tokens = record { e8s : nat64 };
type WalletData = record {
  updated_at : nat64;
  owner : principal;
  cmc_blockheight : nat64;
  created_at : nat64;
  created_by : principal;
  group_id : nat64;
  icp_blockheight : nat64;
};
service : {
  __get_candid_interface_tmp_hack : () -> (text) query;
  _dev_add_wallet : (principal) -> (bool);
  _dev_prod_init : () -> (Result);
  _dev_set_proxy : (principal) -> (bool);
  _dev_upload_multisig_wasm : (blob) -> (bool);
  get_cycles : () -> (nat64) query;
  get_minimum_spawn_icp_amount : () -> (Result_1);
  get_spawn : (nat64) -> (Result_2) query;
  get_spawns : () -> (vec record { nat64; SpawnStatus }) query;
  get_wallets : () -> (vec record { principal; WalletData }) query;
  icts_name : () -> (text) query;
  icts_version : () -> (text) query;
  multisig_new_proposal_notification : (vec principal, nat64, nat64) -> ();
  multisig_proposal_accept_notification : (vec principal, nat64, nat64) -> ();
  multisig_proposal_decline_notification : (vec principal, nat64, nat64) -> ();
  multisig_proposal_status_update_notification : (
      vec principal,
      nat64,
      nat64,
    ) -> ();
  multisig_whitelist_notice_notification : (vec principal, nat64) -> ();
  spawn_wallet : (nat64, vec principal, nat64) -> (Result_3);
  top_up_wallet : (nat64, principal) -> (Result);
  transfer_ownership : (principal, principal) -> (Result_4);
}